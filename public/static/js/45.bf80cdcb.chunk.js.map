{"version":3,"sources":["views/base/Stories.js"],"names":["db","firebase","storage","ref","firestore","collection","fields","seasonsFields","Tables","props","showSeasons","data","setState","isLoading","storyID","id","storyName","name","episodes","seasons","index","doc","get","then","querySnapshot","forEach","push","seasonIndex","showEpisodes","seasonID","seasonName","state","episodeIndex","addNewBook","saveState","history","pathname","addNewSeason","add","docRef","season","showNotification","NOTIFICATION","SUCCESS","catch","error","ERROR","addNewEpisodes","isPublished","likes","episode","editBook","editEpisode","episodeID","closeSeasons","closeEpisodes","my_state","getState","stories","this","className","color","style","width","height","variant","onClick","content","freeSet","cilPlus","size","items","onRowClick","clickableRows","tableFilter","hover","border","pagination","responsive","sorter","itemsPerPage","scopedSlots","item","shape","cilArrowRight","Component"],"mappings":"+VAoBMA,GADUC,IAASC,UAAUC,MACxBF,IAASG,YAAYC,WAAW,gBAErCC,EAAS,CAAC,OAAQ,UAClBC,EAAgB,CAAC,QAEjBC,E,kDACF,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAoCVC,YAAc,SAACC,GACX,EAAKC,SAAS,CAACC,WAAW,EAAMC,QAASH,EAAKI,GAAIC,UAAWL,EAAKM,KAAMC,SAAU,OAElF,IAAIC,EAAU,GAAIC,EAAQ,EAC1BpB,EAAGqB,IAAIV,EAAKI,IAAIV,WAAW,WAAWiB,MAAMC,MAAK,SAACC,GAC9CA,EAAcC,SAAQ,SAACJ,GACnBF,EAAQO,KAAK,CACTX,GAAIM,EAAIN,GACRE,KAAMI,EAAIV,OAAOM,KACjBG,MAAOC,EAAIV,OAAOS,QAElBA,EAAQC,EAAIV,OAAOS,QAAOA,EAAQC,EAAIV,OAAOS,UAErD,EAAKR,SAAS,CAACC,WAAW,EAAOM,QAASA,EAASQ,YAAaP,QAlDrD,EAsDnBQ,aAAe,SAACjB,GACZ,EAAKC,SAAS,CAACC,WAAW,EAAMgB,SAAUlB,EAAKI,GAAIe,WAAYnB,EAAKM,OAD/C,IAGdH,EAAW,EAAKiB,MAAhBjB,QAEHI,EAAW,GAAIE,EAAQ,EAC3BpB,EAAGqB,IAAIP,GAAST,WAAW,WAAWgB,IAAIV,EAAKI,IAAIV,WAAW,YAAYiB,MAAMC,MAAK,SAACC,GAClFA,EAAcC,SAAQ,SAACJ,GACnBH,EAASQ,KAAK,CACVX,GAAIM,EAAIN,GACRE,KAAMI,EAAIV,OAAOM,KACjBG,MAAOC,EAAIV,OAAOS,QAElBA,EAAQC,EAAIV,OAAOS,QAAOA,EAAQC,EAAIV,OAAOS,UAErD,EAAKR,SAAS,CAACC,WAAW,EAAOK,SAAUA,EAAUc,aAAcZ,QArExD,EAyEnBa,WAAa,WACTC,YAAU,EAAKH,OACf,EAAKtB,MAAM0B,QAAQT,KAAK,CACpBU,SAAU,aACVL,MAAO,EAAKA,SA7ED,EAgFnBM,aAAe,WAAO,IAAD,EACc,EAAKN,MAA7BjB,EADU,EACVA,QAASa,EADC,EACDA,YAChB,EAAKf,SAAS,CAACC,WAAW,IAE1Bb,EAAGqB,IAAIP,GAAST,WAAW,WAAWiC,IAAI,CACtCrB,KAAK,UAAD,OAAYU,EAAc,GAC9BP,MAAOO,EAAc,IAEpBJ,MAAK,SAACgB,GACH,IAAIC,EAAS,CAAC,CACVzB,GAAIwB,EAAOxB,GACXE,KAAK,UAAD,OAAYU,EAAc,GAC9BP,MAAOO,EAAc,IAEzB,EAAKf,SAAS,CAACO,QAAQ,GAAD,mBAAM,EAAKY,MAAMZ,SAAYqB,GAASb,YAAaA,EAAY,EAAGd,WAAW,IACnG4B,YAAiBC,IAAaC,QAAS,iCAE1CC,OAAM,SAACC,GACJJ,YAAiBC,IAAaI,MAAO,oCACrC,EAAKlC,SAAS,CAACC,WAAW,QAnGnB,EAuGnBkC,eAAiB,WAAO,IAAD,EACwB,EAAKhB,MAAzCjB,EADY,EACZA,QAASe,EADG,EACHA,SAAUG,EADP,EACOA,aAC1B,EAAKpB,SAAS,CAACC,WAAW,IAEdb,EACPqB,IAAIP,GACJT,WAAW,WACXgB,IAAIQ,GACJxB,WAAW,YAEZiC,IAAI,CACJrB,KAAK,WAAD,OAAae,EAAa,GAC9BgB,aAAa,EACb5B,MAAOY,EAAe,EACtBiB,MAAO,IACR1B,MAAK,SAACgB,GACL,IAAIW,EAAU,CAAC,CACXnC,GAAIwB,EAAOxB,GACXE,KAAK,WAAD,OAAae,EAAa,GAC9BZ,MAAOY,EAAe,IAE1B,EAAKpB,SAAS,CAACM,SAAS,GAAD,mBAAM,EAAKa,MAAMb,UAAagC,GAAUlB,aAAcA,EAAa,EAAGnB,WAAW,IACxG4B,YAAiBC,IAAaC,QAAS,kCACxCC,OAAM,SAACC,GACNJ,YAAiBC,IAAaI,MAAO,oCACrC,EAAKlC,SAAS,CAACC,WAAW,QAhIf,EAoInBsC,SAAW,SAACxC,GACRuB,YAAU,EAAKH,OACf,EAAKtB,MAAM0B,QAAQT,KAAK,CACpBU,SAAU,cACVL,MAAO,CAAChB,GAAIJ,EAAKI,OAxIN,EA4InBqC,YAAc,SAACzC,GACXuB,YAAU,EAAKH,OACf,EAAKtB,MAAM0B,QAAQT,KAAK,CACpBU,SAAU,gBACVL,MAAM,2BAAK,EAAKA,OAAX,IAAkBsB,UAAW1C,EAAKI,QAhJ5B,EAoJnBuC,aAAe,WACX,EAAK1C,SAAS,CAACO,QAAS,KAAMD,SAAU,QArJzB,EAwJnBqC,cAAgB,WACZ,EAAK3C,SAAS,CAACM,SAAU,QAvJzB,IAAIsC,EAAWC,cAFA,OAIE,OAAbD,GACA,EAAKzB,MAAQyB,EACbtB,YAAU,OAEV,EAAKH,MAAQ,CACTlB,WAAW,EACXG,UAAW,KACXF,QAAS,KACTgB,WAAY,KACZD,SAAU,KACVF,YAAa,EACbK,aAAc,EACd0B,QAAS,GACTvC,QAAS,KACTD,SAAU,KACVmC,UAAW,MAnBJ,E,qDAwBnB,WAAqB,IAAD,OACZK,EAAU,GACd1D,EAAGsB,MAAMC,MAAK,SAACC,GACXA,EAAcC,SAAQ,SAACJ,GACnBqC,EAAQhC,KAAK,CACTX,GAAIM,EAAIN,GACRE,KAAMI,EAAIV,OAAOM,UAGzB,EAAKL,SAAS,CAACC,WAAW,EAAO6C,QAASA,S,oBA2HlD,WAAU,IAAD,SAC2CC,KAAK5B,MAA9ClB,EADF,EACEA,UAAW6C,EADb,EACaA,QAASvC,EADtB,EACsBA,QAASD,EAD/B,EAC+BA,SAEpC,OACI,cAAC,WAAD,UACI,mCAEQL,EACI,qBAAK+C,UAAU,cAAf,SACI,cAAC,KAAD,CACIA,UAAU,OACVC,MAAM,UACNC,MAAO,CAACC,MAAO,OAAQC,OAAQ,YAIvC,eAAC,KAAD,WACI,cAAC,IAAD,CAAMJ,UAAU,MAAhB,SACI,eAAC,IAAD,CAAOA,UAAU,QAAjB,UACI,eAAC,IAAD,CAAaA,UAAU,iCAAvB,UACI,yCACA,cAAC,IAAD,CAASK,QAAQ,UAAUC,QAASP,KAAK1B,WAAY4B,MAAM,UAA3D,SACI,cAAC,IAAD,CAAOM,QAASC,IAAQC,QAASC,KAAK,YAG9C,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,MAAOb,EACPpD,OAAQA,EACRkE,WAAYb,KAAKjD,YACjB+D,eAAe,EACfC,aAAW,EACXC,OAAK,EACLC,QAAM,EACNC,YAAU,EACVC,YAAU,EACVC,QAAM,EACNC,aAAc,IACdC,YAAa,CACT,OACI,SAACC,EAAM9D,GACH,OACI,oBAAIwC,UAAU,OAAd,SACI,cAAC,IAAD,CACIC,MAAM,UACNI,QAAQ,QACRkB,MAAM,OACNb,KAAK,KACLJ,QAAS,kBAAM,EAAKf,SAAS+B,IALjC,SAOI,cAAC,IAAD,CAAOjE,KAAK,YAAYqD,KAAK,sBAWpEnD,GACG,cAAC,IAAD,CAAMyC,UAAU,MAAhB,SACI,eAAC,IAAD,CAAOA,UAAU,QAAjB,UACI,eAAC,IAAD,CAAaA,UAAU,iCAAvB,UACI,yCACA,gCACI,cAAC,IAAD,CAASM,QAASP,KAAKtB,aAAc4B,QAAQ,UACpCJ,MAAM,UADf,SAEI,cAAC,IAAD,CAAOM,QAASC,IAAQC,QAASC,KAAK,SAE1C,cAAC,IAAD,CAASV,UAAW,OAAQM,QAASP,KAAKL,aACjCW,QAAQ,UAAUJ,MAAM,SADjC,SAEI,cAAC,IAAD,CAAOM,QAASC,IAAQgB,cAAed,KAAK,eAIxD,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,MAAOpD,EACPb,OAAQC,EACRiE,WAAYb,KAAK/B,aACjB6C,eAAe,EACfC,aAAW,EACXC,OAAK,EACLC,QAAM,EACNC,YAAU,EACVC,YAAU,EACVC,QAAM,EACNC,aAAc,aAQjC9D,GACG,cAAC,IAAD,CAAM0C,UAAU,MAAhB,SACI,eAAC,IAAD,CAAOA,UAAU,QAAjB,UACI,eAAC,IAAD,CAAaA,UAAU,iCAAvB,UACI,0CACA,gCACI,cAAC,IAAD,CAASM,QAASP,KAAKZ,eAAgBkB,QAAQ,UACtCJ,MAAM,UADf,SAEI,cAAC,IAAD,CAAOM,QAASC,IAAQC,QAASC,KAAK,SAE1C,cAAC,IAAD,CAASV,UAAW,OAAQM,QAASP,KAAKJ,cACjCU,QAAQ,UAAUJ,MAAM,SADjC,SAEI,cAAC,IAAD,CAAOM,QAASC,IAAQgB,cAAed,KAAK,eAIxD,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,MAAOrD,EACPZ,OAAQA,EACRoE,aAAW,EACXC,OAAK,EACLC,QAAM,EACNC,YAAU,EACVC,YAAU,EACVC,QAAM,EACNC,aAAc,IACdC,YAAa,CACT,OACI,SAACC,EAAM9D,GACH,OACI,oBAAIwC,UAAU,OAAd,SACI,cAAC,IAAD,CACIC,MAAM,UACNI,QAAQ,QACRkB,MAAM,OACNb,KAAK,KACLJ,QAAS,kBAAM,EAAKd,YAAY8B,IALpC,SAOI,cAAC,IAAD,CAAOjE,KAAK,YAAYqD,KAAK,iC,GArSpFe,aA2TN7E","file":"static/js/45.bf80cdcb.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react'\nimport firebase from 'firebase/app'\nimport {saveState, getState, showNotification, NOTIFICATION} from '../../reusable/Utility';\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\nimport {\n    CSpinner,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CDataTable,\n    CRow,\n    CButton\n} from '@coreui/react'\nimport {CIcon} from \"@coreui/icons-react\";\nimport {freeSet} from '@coreui/icons'\n\nconst storage = firebase.storage().ref();\nconst db = firebase.firestore().collection(\"stories_dev\");\n\nconst fields = ['name', 'action']\nconst seasonsFields = ['name']\n\nclass Tables extends Component {\n    constructor(props) {\n        super(props);\n        let my_state = getState();\n\n        if (my_state !== null) {\n            this.state = my_state;\n            saveState(null);\n        } else {\n            this.state = {\n                isLoading: true,\n                storyName: null,\n                storyID: null,\n                seasonName: null,\n                seasonID: null,\n                seasonIndex: 1,\n                episodeIndex: 1,\n                stories: [],\n                seasons: null,\n                episodes: null,\n                episodeID: null\n            };\n        }\n    }\n\n    componentDidMount() {\n        let stories = [];\n        db.get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                stories.push({\n                    id: doc.id,\n                    name: doc.data().name\n                });\n            });\n            this.setState({isLoading: false, stories: stories});\n        });\n    }\n\n    showSeasons = (data) => {\n        this.setState({isLoading: true, storyID: data.id, storyName: data.name, episodes: null});\n\n        let seasons = [], index = 0;\n        db.doc(data.id).collection('seasons').get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                seasons.push({\n                    id: doc.id,\n                    name: doc.data().name,\n                    index: doc.data().index\n                });\n                if (index < doc.data().index) index = doc.data().index;\n            });\n            this.setState({isLoading: false, seasons: seasons, seasonIndex: index});\n        });\n    };\n\n    showEpisodes = (data) => {\n        this.setState({isLoading: true, seasonID: data.id, seasonName: data.name});\n\n        const {storyID} = this.state;\n\n        let episodes = [], index = 0;\n        db.doc(storyID).collection('seasons').doc(data.id).collection('episodes').get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                episodes.push({\n                    id: doc.id,\n                    name: doc.data().name,\n                    index: doc.data().index\n                });\n                if (index < doc.data().index) index = doc.data().index;\n            });\n            this.setState({isLoading: false, episodes: episodes, episodeIndex: index});\n        });\n    };\n\n    addNewBook = () => {\n        saveState(this.state);\n        this.props.history.push({\n            pathname: '/add-story',\n            state: this.state\n        });\n    };\n    addNewSeason = () => {\n        const {storyID, seasonIndex} = this.state;\n        this.setState({isLoading: true});\n\n        db.doc(storyID).collection('seasons').add({\n            name: `Season ${seasonIndex + 1}`,\n            index: seasonIndex + 1\n        })\n            .then((docRef) => {\n                let season = [{\n                    id: docRef.id,\n                    name: `Season ${seasonIndex + 1}`,\n                    index: seasonIndex + 1\n                }];\n                this.setState({seasons: [...this.state.seasons, ...season], seasonIndex: seasonIndex+1, isLoading: false});\n                showNotification(NOTIFICATION.SUCCESS, 'Season added successfully!');\n            })\n            .catch((error) => {\n                showNotification(NOTIFICATION.ERROR, 'Something went wrong. Try again!');\n                this.setState({isLoading: false});\n            });\n    };\n\n    addNewEpisodes = () => {\n        const {storyID, seasonID, episodeIndex } = this.state;\n        this.setState({isLoading: true});\n\n        const ref = db\n            .doc(storyID)\n            .collection('seasons')\n            .doc(seasonID)\n            .collection('episodes');\n\n        ref.add({\n            name: `Episode ${episodeIndex+1}`,\n            isPublished: false,\n            index: episodeIndex + 1,\n            likes: 0\n        }).then((docRef) => {\n            let episode = [{\n                id: docRef.id,\n                name: `Episode ${episodeIndex+1}`,\n                index: episodeIndex + 1,\n            }];\n            this.setState({episodes: [...this.state.episodes, ...episode], episodeIndex: episodeIndex+1, isLoading: false});\n            showNotification(NOTIFICATION.SUCCESS, 'Episode added successfully!');\n        }).catch((error) => {\n            showNotification(NOTIFICATION.ERROR, 'Something went wrong. Try again!');\n            this.setState({isLoading: false});\n        });\n    };\n\n    editBook = (data) => {\n        saveState(this.state);\n        this.props.history.push({\n            pathname: '/edit-story',\n            state: {id: data.id}\n        });\n    }\n\n    editEpisode = (data) => {\n        saveState(this.state);\n        this.props.history.push({\n            pathname: '/edit-episode',\n            state: {...this.state, episodeID: data.id}\n        });\n    }\n\n    closeSeasons = () => {\n        this.setState({seasons: null, episodes: null});\n    }\n\n    closeEpisodes = () => {\n        this.setState({episodes: null});\n    }\n\n    render() {\n        const {isLoading, stories, seasons, episodes} = this.state;\n\n        return (\n            <Fragment>\n                <>\n                    {\n                        isLoading ? (\n                            <div className=\"text-center\">\n                                <CSpinner\n                                    className=\"mt-5\"\n                                    color=\"primary\"\n                                    style={{width: '4rem', height: '4rem'}}\n                                />\n                            </div>\n                        ) : (\n                            <CRow>\n                                <CCol className=\"p-0\">\n                                    <CCard className=\"h-100\">\n                                        <CCardHeader className=\"d-flex justify-content-between\">\n                                            <h2>Stories</h2>\n                                            <CButton variant=\"outline\" onClick={this.addNewBook} color=\"primary\">\n                                                <CIcon content={freeSet.cilPlus} size=\"lg\"/>\n                                            </CButton>\n                                        </CCardHeader>\n                                        <CCardBody>\n                                            <CDataTable\n                                                items={stories}\n                                                fields={fields}\n                                                onRowClick={this.showSeasons}\n                                                clickableRows={true}\n                                                tableFilter\n                                                hover\n                                                border\n                                                pagination\n                                                responsive\n                                                sorter\n                                                itemsPerPage={100}\n                                                scopedSlots={{\n                                                    'action':\n                                                        (item, index) => {\n                                                            return (\n                                                                <td className=\"py-2\">\n                                                                    <CButton\n                                                                        color=\"primary\"\n                                                                        variant=\"ghost\"\n                                                                        shape=\"pill\"\n                                                                        size=\"sm\"\n                                                                        onClick={() => this.editBook(item)}\n                                                                    >\n                                                                        <CIcon name=\"cilPencil\" size=\"sm\"/>\n                                                                    </CButton>\n                                                                </td>\n                                                            )\n                                                        }\n                                                }}\n                                            />\n                                        </CCardBody>\n                                    </CCard>\n                                </CCol>\n\n                                {seasons && (\n                                    <CCol className=\"p-0\">\n                                        <CCard className=\"h-100\">\n                                            <CCardHeader className=\"d-flex justify-content-between\">\n                                                <h2>Seasons</h2>\n                                                <div>\n                                                    <CButton onClick={this.addNewSeason} variant=\"outline\"\n                                                             color=\"primary\">\n                                                        <CIcon content={freeSet.cilPlus} size=\"lg\"/>\n                                                    </CButton>\n                                                    <CButton className={'ml-1'} onClick={this.closeSeasons}\n                                                             variant=\"outline\" color=\"danger\">\n                                                        <CIcon content={freeSet.cilArrowRight} size=\"lg\"/>\n                                                    </CButton>\n                                                </div>\n                                            </CCardHeader>\n                                            <CCardBody>\n                                                <CDataTable\n                                                    items={seasons}\n                                                    fields={seasonsFields}\n                                                    onRowClick={this.showEpisodes}\n                                                    clickableRows={true}\n                                                    tableFilter\n                                                    hover\n                                                    border\n                                                    pagination\n                                                    responsive\n                                                    sorter\n                                                    itemsPerPage={100}\n                                                />\n                                            </CCardBody>\n                                        </CCard>\n                                    </CCol>\n                                )}\n\n\n                                {episodes && (\n                                    <CCol className=\"p-0\">\n                                        <CCard className=\"h-100\">\n                                            <CCardHeader className=\"d-flex justify-content-between\">\n                                                <h2>Episodes</h2>\n                                                <div>\n                                                    <CButton onClick={this.addNewEpisodes} variant=\"outline\"\n                                                             color=\"primary\">\n                                                        <CIcon content={freeSet.cilPlus} size=\"lg\"/>\n                                                    </CButton>\n                                                    <CButton className={'ml-1'} onClick={this.closeEpisodes}\n                                                             variant=\"outline\" color=\"danger\">\n                                                        <CIcon content={freeSet.cilArrowRight} size=\"lg\"/>\n                                                    </CButton>\n                                                </div>\n                                            </CCardHeader>\n                                            <CCardBody>\n                                                <CDataTable\n                                                    items={episodes}\n                                                    fields={fields}\n                                                    tableFilter\n                                                    hover\n                                                    border\n                                                    pagination\n                                                    responsive\n                                                    sorter\n                                                    itemsPerPage={100}\n                                                    scopedSlots={{\n                                                        'action':\n                                                            (item, index) => {\n                                                                return (\n                                                                    <td className=\"py-2\">\n                                                                        <CButton\n                                                                            color=\"primary\"\n                                                                            variant=\"ghost\"\n                                                                            shape=\"pill\"\n                                                                            size=\"sm\"\n                                                                            onClick={() => this.editEpisode(item)}\n                                                                        >\n                                                                            <CIcon name=\"cilPencil\" size=\"sm\"/>\n                                                                        </CButton>\n                                                                    </td>\n                                                                )\n                                                            }\n                                                    }}\n                                                />\n                                            </CCardBody>\n                                        </CCard>\n                                    </CCol>\n                                )}\n                            </CRow>\n                        )\n                    }\n                </>\n            </Fragment>\n        );\n    }\n\n\n}\n\nexport default Tables\n"],"sourceRoot":""}