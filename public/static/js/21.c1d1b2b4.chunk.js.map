{"version":3,"sources":["reusable/DocsLink.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/notifications/toaster/Toaster.js"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Toaster","useState","position","autohide","toasts","setToasts","setPosition","setAutohide","autohideValue","setAutohideValue","closeButton","setCloseButton","fade","setFade","toasters","reduce","toast","sm","lg","variant","id","checked","onChange","e","custom","htmlFor","type","Number","map","color","onClick","keys","toasterKey","key","show"],"mappings":"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","file":"static/js/21.c1d1b2b4.chunk.js","sourcesContent":["import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState } from 'react'\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n  CForm,\n  CInput,\n  CInputCheckbox,\n  CButton,\n  CContainer,\n  CRow,\n  CCol,\n  CFormGroup,\n  CLabel\n} from '@coreui/react'\nimport { DocsLink } from 'src/reusable'\n\nconst Toaster = () => {\n\n  const positions = [\n    'static',\n    'top-left',\n    'top-center',\n    'top-right',\n    'top-full',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n    'bottom-full'\n  ]\n\n  const [toasts, setToasts] = useState([\n    { position: 'static'},\n    { position: 'static'},\n    { position: 'top-right', autohide: 3000 }\n  ])\n\n  const [position, setPosition] = useState('top-right')\n  const [autohide, setAutohide] = useState(true)\n  const [autohideValue, setAutohideValue] = useState(5000)\n  const [closeButton, setCloseButton] = useState(true)\n  const [fade, setFade] = useState(true)\n\n  const addToast = () => {\n    setToasts([\n      ...toasts, \n      { position, autohide: autohide && autohideValue, closeButton, fade }\n    ])\n  }\n\n\n  const toasters = (()=>{\n    return toasts.reduce((toasters, toast) => {\n      toasters[toast.position] = toasters[toast.position] || []\n      toasters[toast.position].push(toast)\n      return toasters\n    }, {})\n  })()\n\n\n  return (\n    <CCard>\n      <CCardHeader>\n        Toasts.\n        <DocsLink name=\"-Toast\"/>\n      </CCardHeader>\n      <CCardBody>\n        <CContainer>\n          <CRow>\n            <CCol sm=\"12\" lg=\"6\">\n              <CForm>\n                <h5>Add toast with following props:</h5>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\n                  <CInputCheckbox\n                    id=\"autohide\"\n                    checked={autohide}\n                    onChange={e => { setAutohide(e.target.checked) }}\n                    custom\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\n                    Autohide of the toast\n                  </CLabel>\n                </CFormGroup>\n                {\n                  autohide &&\n                  <CFormGroup className=\"my-2\">\n                    <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\n                    <CInput\n                      type=\"number\"\n                      value={autohideValue}\n                      onChange={e => {\n                        setAutohideValue(Number(e.target.value))\n                      }}\n                    />\n                  </CFormGroup>\n                }\n\n                <CFormGroup className=\"my-2\">\n                  <CLabel htmlFor=\"ccyear\">Position</CLabel>\n                  <select\n                    className=\"form-control\"\n                    value={position}\n                    onChange={e => {setPosition(e.target.value)}}\n                  >\n                    {\n                      positions.map((position, i)=>(\n                        <option key={i}>{position}</option>\n                      ))\n                    }\n                  </select>\n                </CFormGroup>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                  <CInputCheckbox\n                    id=\"fade\"\n                    checked={fade}\n                    onChange={e => { setFade(e.target.checked) }}\n                    custom\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\n                </CFormGroup>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                  <CInputCheckbox\n                    id=\"close\"\n                    custom\n                    checked={closeButton}\n                    onChange={e=> { setCloseButton(e.target.checked) }}\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">\n                    closeButton\n                  </CLabel>\n                </CFormGroup>\n\n                <CButton\n                  className=\"mr-1 w-25\"\n                  color=\"success\"\n                  onClick={addToast}\n                >\n                  Add toast\n                </CButton>\n\n              </CForm>\n            </CCol>\n            <CCol sm=\"12\" lg=\"6\">\n              {Object.keys(toasters).map((toasterKey) => (\n                <CToaster\n                  position={toasterKey}\n                  key={'toaster' + toasterKey}\n                >\n                  {\n                    toasters[toasterKey].map((toast, key)=>{\n                    return(\n                      <CToast\n                        key={'toast' + key}\n                        show={true}\n                        autohide={toast.autohide}\n                        fade={toast.fade}\n                      >\n                        <CToastHeader closeButton={toast.closeButton}>\n                          Toast title\n                        </CToastHeader>\n                        <CToastBody>\n                          {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\n                        </CToastBody>\n                      </CToast>\n                    )\n                  })\n                  }\n                </CToaster>\n              ))}\n            </CCol>\n          </CRow>\n        </CContainer>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default Toaster\n"],"sourceRoot":""}